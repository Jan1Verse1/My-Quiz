function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import className from 'classnames';
import './style.css';

var ReactOptions = function (_PureComponent) {
  _inherits(ReactOptions, _PureComponent);

  function ReactOptions() {
    _classCallCheck(this, ReactOptions);

    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
  }

  ReactOptions.prototype.componentWillReceiveProps = function componentWillReceiveProps() {};

  ReactOptions.prototype.render = function render() {
    var _props = this.props,
        children = _props.children,
        details = _props.details,
        optionsActive = _props.optionsActive,
        id = _props.id;

    var detailsStyle = className('ro-details', { 'ro-details_show': optionsActive === id });

    return React.createElement(
      'div',
      { className: 'ro-wrapper' },
      React.createElement(
        'div',
        { className: 'ro-main' },
        children
      ),
      React.createElement(
        'div',
        { className: detailsStyle },
        details
      )
    );
  };

  return ReactOptions;
}(PureComponent);

export default ReactOptions;

ReactOptions.propTypes = process.env.NODE_ENV !== "production" ? {
  children: PropTypes.node.isRequired,
  details: PropTypes.node.isRequired,
  optionsActive: PropTypes.string,
  id: PropTypes.string.isRequired
} : {};

ReactOptions.defaultProps = {
  optionsActive: null
};